<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Terminal</title>
    <link href="/2021/09/22/Terminal/"/>
    <url>/2021/09/22/Terminal/</url>
    
    <content type="html"><![CDATA[<ul><li><p>set,env,export,source,exec傻傻分不清楚？</p><ul><li>set设置了当前shell进程的本地变量，本地变量只在当前shell的进程内有效，不会被子进程继承和传递。</li><li>env仅为将要执行的子进程设置环境变量。export将一个shell本地变量提升为当前shell进程的环境变量，从而被子进程自动继承，但是export的变量无法改变父进程的环境变量。</li><li>source运行脚本的时候，不会启用一个新的shell进程，而是在当前shell进程环境中运行脚本。</li><li>exec运行脚本或命令的时候，不会启用一个新的shell进程，并且exec后续的脚本内容不会得到执行，即当前shell进程结束了。</li></ul></li><li><p>command</p><ul><li>sed : 替换文件字符串<ul><li>例如: sed -i ‘s/path/path1/g’  ~/.zshrc</li><li>多个文件替换👇</li><li>sed -i “s/oldstring/newstring/g” <code>grep oldstring -rl yourdir</code></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s</title>
    <link href="/2021/09/18/K8s/"/>
    <url>/2021/09/18/K8s/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s解决master挂掉的方案"><a href="#k8s解决master挂掉的方案" class="headerlink" title="k8s解决master挂掉的方案"></a>k8s解决master挂掉的方案</h1><ol><li>kubernetes高可用集群，就是解决一个master跪了的问题。</li><li>kubernetes master节点中所包含的组件有etcd、api-server、controller-manager、scheduler。etcd作为数据中心，单独拿出来做集群。</li><li>controller-manager和scheduler通过选举来保障高可用，负载均衡可以通过Nginx加keepalived来实现，同时可以用etcd+confd来同步配置Nginx</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>K8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AliEcsGithubSlow</title>
    <link href="/2021/07/20/ECS/"/>
    <url>/2021/07/20/ECS/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GSSAPIAuthentication no<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Ecs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM</title>
    <link href="/2021/07/06/VIM/"/>
    <url>/2021/07/06/VIM/</url>
    
    <content type="html"><![CDATA[<ul><li><p>插件</p><ul><li><p>vimplug</p><ul><li>curl -fLo ~/.vim/autoload/plug.vim —create-dirs <a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</a></li></ul></li><li><p>配置：set nu<br>set background=dark<br>“colorscheme molokai”<br>syntax on<br>set ts=4<br>set expandtab<br>set autoindent<br>set shiftwidth=4<br>map <C-n> :NERDTreeToggle<CR><br>map <F2> :NERDTreeToggle<CR><br>call plug#begin(‘~/.vim/plugged’)<br>Plug ‘itchyny/lightline.vim’<br>Plug ‘preservim/nerdtree’<br>Plug ‘neoclide/coc.nvim’, {‘branch’: ‘release’}<br>call plug#end()<br>%retab  </p></li><li><p>Coc</p><ul><li>py3:CocInstall coc-pyright    </li><li>rust:CocInstall coc-rust-analyzer</li><li><p>安装命令:CocInstall 插件名</p></li><li><p>移除命令:CocUninstall 插件名</p></li><li><p>查看已安装:CocList extensions</p></li><li><p>更新命令:CocUpdate</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>TextEditor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZSH</title>
    <link href="/2021/07/06/ZSH/"/>
    <url>/2021/07/06/ZSH/</url>
    
    <content type="html"><![CDATA[<ul><li><p>zsh </p><ul><li>sh -c “$(curl -fsSL <a href="https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh">https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh</a>)”</li></ul></li><li><p>zsh插件</p><ul><li>autjumpe<ul><li>git clone git://github.com/wting/autojump.git</li><li>cd autojump</li><li>./install.py</li></ul></li><li>zsh-syntax-highlighting:<ul><li>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</li></ul></li></ul><ul><li>zsh-autosuggestions<ul><li>git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</li></ul></li><li>config<ul><li>plugins=(<br>git<br>autojump<br>zsh-syntax-highlighting<br>zsh-autosuggestions<br>)</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA Principle</title>
    <link href="/2021/06/16/RSA/"/>
    <url>/2021/06/16/RSA/</url>
    
    <content type="html"><![CDATA[<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="About-Rsa-Algorithm"><a href="#About-Rsa-Algorithm" class="headerlink" title="About Rsa Algorithm"></a>About Rsa Algorithm</h3><ol><li>一直到上个世纪70年代，基本上还是使用对称加密算法。<br>对称加密算法：<br> 发送方和接收方需要见面协商密钥，来对数据加密和解密。<ul><li>优点：<br>加密速度快，处理数据后可复原</li><li>缺点：<br>随着网络规模的扩大，多一个用户就需要额外保存密钥，管理密钥是一个大问题。<br>必须见面协商，没有密钥就无法对数据进行加密和解密。</li></ul></li><li>首次发现RSA加密算法就被封存了起来，一直到1977年，由三个上个世纪年轻人发现，分别是罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman），因此命名为RSA非对称加密算法。</li><li>简单来说，非对称加密是所有人通过公钥加密信息，私钥自己留着，持有私钥者通过私钥解密，白话来说就是，发送方给你送了一把锁🔐，作为接收方的你，需要把你写的内容用🔐扣起来发给发送方，发送方可以用私钥解密，验证消息。</li></ol><h3 id="Reality-RSA"><a href="#Reality-RSA" class="headerlink" title="Reality RSA"></a>Reality RSA</h3><ol><li>什么样的算法单向计算容易，逆向反推非常难呢？<br>答案是：模运算也就是求余运算，也被称为单向函数</li><li>举个例子：<br>$3^3 mod 7=6$ 非常好计算，但是$3^x mod 7=6$计算x确不那么容易可能需要自己一遍遍试基本上是穷举所有结果，而对于大数来说求模运算的逆推基本是不可能的。目前最前沿的分布式算法大约花费了2700个<a href="https://lists.gforge.inria.fr/pipermail/cado-nfs-discuss/2020-February/001166.html">CPU年</a>(以Intel Xeon Gold 6130的单个核心的计算能力作为参考，需要花2700年才能完成这个质数的分解)，分解了一个829位的数字。</li><li>举个轮子：<br> e:encrypt d: decrypt  c:cipher<br> 加密：$m^e mod N \equiv c$<br> 解密：$c^d mod N \equiv m$<br> 合并：$m^{ed} mod N \equiv m$ 这个公式不知道怎么来的参考<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">wiki</a>:<br> 根据欧拉定理：<br> $m^{\varphi(n)}\equiv1 (mod\quad n)$<br> $\varphi(n)$是欧拉函数：即小于或等于n的正整数中，有多少个与n互质的数<br> 公式变换：<br> $m^{k\varphi(n)}\times m=m\times1^k(mod\quad n)$<br> 即：$m^{k\varphi(n)+1}\times(mod\quad n)=m$<br> 对应：$k\varphi(n)+1=ed$<br> 变换：$\frac{k\varphi(n)+1}{e}=d$<br> 如果n本身为质数：<br> 例如： 小于7与7互质的数 1，2，3，4，5，6<br> 推导：<br> $\varphi(n) = n-1$<br> p,q均为质数<br> $\varphi(pq)$ = $\varphi(p)\times\varphi(q)$<br> $\varphi(17\times23)$ = $\varphi(17)\times\varphi(23)=\varphi(391) = 16\times22$ = 352<br> 当e=3,k=5的时候<br> $d = \frac{5\times\varphi(n)+1}{3}$并且$\varphi(n)=352,n=391$<br> 代入也就是说d=587<br> 所以加密密钥e=3，n=391,解密密钥d=587  </li><li>再举个栗子：<br> 字符’a’的ascii码为97<br> $97^3 mod 391 = 79$<br> $79^{587} mod 391 = 97$  </li></ol><hr><p>数学部分就到此结束了！未完待续。。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket</title>
    <link href="/2021/06/10/Socket/"/>
    <url>/2021/06/10/Socket/</url>
    
    <content type="html"><![CDATA[<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><h3 id="Socket支持两种协议一种TCP（传输控制协议）一种UDP（用户数据报协议）"><a href="#Socket支持两种协议一种TCP（传输控制协议）一种UDP（用户数据报协议）" class="headerlink" title="Socket支持两种协议一种TCP（传输控制协议）一种UDP（用户数据报协议）"></a>Socket支持两种协议一种TCP（传输控制协议）一种UDP（用户数据报协议）</h3><pre><code>UDP：快、安全、不稳定    适用场景：即时通信TCP：慢、安全、较稳定    适用场景：HTTP、FTP、SMTP等</code></pre><h3 id="如何创建一个socket服务器"><a href="#如何创建一个socket服务器" class="headerlink" title="如何创建一个socket服务器"></a>如何创建一个socket服务器</h3><h4 id="以Python3为例："><a href="#以Python3为例：" class="headerlink" title="以Python3为例："></a>以Python3为例：</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import <span class="hljs-built_in">socket</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET,<span class="hljs-built_in">socket</span>.SOCK_STREAM) <span class="hljs-keyword">as</span> s:<br>    s.bind((<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-number">1234</span>))<br>    s.listen()<br>    c,addr = s.accept()<br>    <span class="hljs-keyword">with</span> c:<br>        print(addr, <span class="hljs-string">&quot;connected&quot;</span>)<br>        <span class="hljs-keyword">while</span> True:<br>            data = c.recv(<span class="hljs-number">1024</span>)<br></code></pre></td></tr></table></figure><h3 id="如何创建一个socket客户端"><a href="#如何创建一个socket客户端" class="headerlink" title="如何创建一个socket客户端"></a>如何创建一个socket客户端</h3><h4 id="以Python3为例：-1"><a href="#以Python3为例：-1" class="headerlink" title="以Python3为例："></a>以Python3为例：</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-title">with</span> socket.socket(socket.<span class="hljs-type">AF_INET</span>,socket.<span class="hljs-type">SOCK_STREAM</span>) <span class="hljs-keyword">as</span> s:<br>    s.connect((<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-number">1234</span>))<br>    s.sendall(b<span class="hljs-string">&quot;hello my socket&quot;</span>)<br>    <span class="hljs-class"><span class="hljs-keyword">data</span> = s.recv(1024)</span><br>    print(<span class="hljs-string">&quot;recived&quot;</span>,repr(<span class="hljs-class"><span class="hljs-keyword">data</span>))</span><br></code></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClickHouse</title>
    <link href="/2021/05/27/ClickHouse/"/>
    <url>/2021/05/27/ClickHouse/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是ClickHouse？"><a href="#什么是ClickHouse？" class="headerlink" title="什么是ClickHouse？"></a>什么是ClickHouse？</h2><pre><code>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)，列式数据库。</code></pre><h2 id="为什么要用ClickHouse"><a href="#为什么要用ClickHouse" class="headerlink" title="为什么要用ClickHouse"></a>为什么要用ClickHouse</h2><pre><code>列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍)</code></pre><p>行式：<br><img src="https://clickhouse.tech/docs/zh/images/row-oriented.gif" alt="行数据库"><br>列式：<br><img src="https://clickhouse.tech/docs/zh/images/column-oriented.gif" alt="列数据库"></p><ul><li>针对分析类查询，通常只需要读取表的一小部分列。在列式数据库中你可以</li><li>只读取你需要的数据。例如，如果只需要读取100列中的5列，这将帮助你最少减少20倍的I/O消耗。</li><li>由于数据总是打包成批量读取的，所以压缩是非常容易的。同时数据按列分别存储这也更容易压缩。这进一步降低了I/O的体积。<br>由于I/O的降低，这将帮助更多的数据被系统缓存。</li></ul><hr><p>以上大部分来自<a href="&quot;https://clickhouse.tech/docs/zh/&quot;">ClickHouse</a></p>]]></content>
    
    
    <categories>
      
      <category>DataBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ClickHouse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2021/05/26/Linux/"/>
    <url>/2021/05/26/Linux/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h3><pre><code>重定向指的是使用文件代替标准输入输出和错误输出</code></pre><div class="table-container"><table><thead><tr><th>1</th><th>代码</th><th>运算符</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>标准输入stdin|0|&lt;或者&lt;&lt;<br>标准输出stdout|1|&gt;或者&gt;&gt;<br>标准错误stderr|2|2&gt;或者2&gt;&gt;<br>    如果要将标准输入以及错误输出同时重定向到一个文件需要将某个输出转换成另一个输出，例如2&gt;&amp;1 表示将标准错误输出转为标准输出<br>    find /home -name .bashrc &gt; list 2&gt;&amp;1</p><p>随笔</p>]]></content>
    
    
    <categories>
      
      <category>System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/05/25/Docker/"/>
    <url>/2021/05/25/Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="About-Docker-Compose"><a href="#About-Docker-Compose" class="headerlink" title="About Docker Compose"></a>About Docker Compose</h2><pre><code>Compose 是运行多容器Docker应用程序的工具</code></pre><p>通过<a href="https://www.runoob.com/w3cnote/yaml-intro.html">Yaml</a>来配置所有需要运行的服务</p><p>Compose 三步骤：</p><blockquote><ol><li>dockerfile 定义应用程序的环境</li><li>docker-compose.yml 配置应用程序的服务</li><li>docker-compose up 启动应用程序</li></ol></blockquote><h2 id="One-Key-Docker-Operate"><a href="#One-Key-Docker-Operate" class="headerlink" title="One Key Docker Operate"></a>One Key Docker Operate</h2><h3 id="1-对于容器"><a href="#1-对于容器" class="headerlink" title="1. 对于容器"></a>1. 对于容器</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker start/stop/rm <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">ps</span> -<span class="hljs-params">a</span> | <span class="hljs-params">awk</span> &#x27;&#123; <span class="hljs-params">print</span> $1&#125;&#x27; | <span class="hljs-params">tail</span> -<span class="hljs-params">n</span> +2)</span> <br></code></pre></td></tr></table></figure><h3 id="2-对于镜像"><a href="#2-对于镜像" class="headerlink" title="2. 对于镜像"></a>2. 对于镜像</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker rmi <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">images</span> | <span class="hljs-params">awk</span> &#x27;&#123; <span class="hljs-params">print</span> $3&#125;&#x27; | <span class="hljs-params">tail</span> -<span class="hljs-params">n</span> + 2 )</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Container</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electron</title>
    <link href="/2021/05/23/Electron/"/>
    <url>/2021/05/23/Electron/</url>
    
    <content type="html"><![CDATA[<h2 id="Electron-question"><a href="#Electron-question" class="headerlink" title="Electron question"></a>Electron question</h2><blockquote><p>Electron need cd node_moudules use npm install </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DesktopFrameBasicJSCSSHTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
